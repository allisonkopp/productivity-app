<nav class="navbar" role="navigation" aria-label="main navigation">
	<div id="navbarBasicExample" class="navbar-menu">
		<div class="navbar-start">
			<h2>THRIVE</h2>
		</div>
		<div class="navbar-end">
			<div class="navbar-item has-dropdown is-hoverable">
				<a class="navbar-link">
					More
				</a>
				<div class="navbar-dropdown">
					<a class="navbar-item" href="/account">
						Account
					</a>
					<a class="navbar-item" href="/logout">
						Logout
					</a>
				</div>
			</div>
		</div>
	</div>
</nav>

<div>
	<div class="columns">
		<div class="column is-1">
			<aside class="menu">
				<ul class="menu-list">
					<li><a href="/profile"><i class="fas fa-home fa-2x"></i></a></li>
					<li><a href="/note"><i class="far fa-sticky-note fa-2x"></i></a></li>
					<li><a><i class="far fa-calendar-alt fa-2x"></i></a></li>
					<li><a><i class="fas fa-book fa-2x"></i></a></li>
					<li><a><i class="fas fa-bullseye fa-2x"></i></a></li>
					<li><a href="/reminder"><i class="far fa-bell fa-2x"></i></a></li>
				</ul>
			</aside>
		</div>
		<div class="column">
			<div>
				<button id="add-sticky" onclick="addStickyNote()"><a>Add stickey note</a></button>
				<button><a>Get inspired</a></button>
				<button><a>Word of the day</a></button>
			</div>

			<div class="box">
				<h2>To-Do List</h2>
				<ul id="existing-list">
					{{#each listItems}}
					<a href="/list/delete?id={{this._id}}"><i class="far fa-circle"></i></a>
					{{!-- <input type="checkbox" name="checkbox"> --}}
					<li>
						{{item}}
					</li>
					{{/each}}
				</ul>
				<ul id="list">
					<li id="plus-icon"><button onclick="addListItem()"><i class="fas fa-plus"></i></button></li>
				</ul>


			</div>

			<div id="container">
				<div id="sticky-note">
					<article class="message is-info">
						<div class="message-header" id="stickey-header">
							<p>Stickey</p>
							<button class="delete" onclick="deleteStickyNote()" aria-label="delete"></button>
						</div>
						<div class="message-body">
							<form wrap="hard" id="form">

								<textarea onkeyup="saveStickyNote()" id="input" name="input" class="textarea"
									placeholder="Enter text..." rows="10"></textarea>
							</form>
						</div>
					</article>
				</div>
			</div>
		</div>
	</div>
</div>



<script>

	const addListItem = _ => {
		const list = document.querySelector('#list')
		const plus = document.querySelector('#plus-icon')
		const listItem = document.createElement('li')
		listItem.innerHTML = "this is working"
		const checkbox = document.createElement("INPUT")
		checkbox.setAttribute("type", "checkbox")
		checkbox.setAttribute("name", "checkbox")
		const form = document.createElement("form")
		const input = document.createElement("INPUT")
		input.setAttribute("type", "text")
		input.setAttribute("id", "input")
		form.appendChild(checkbox)
		form.appendChild(input)
		list.insertBefore(form, plus)
		plus.addEventListener("click", saveListItem)

	}

	const saveListItem = async _ => {
		const item = document.querySelector('#input').value
		await axios.post('list/create-list', { item }).then(_ => {
			console.log("new list item created")
		})
	}

	/*
	//change this
	const checkbox = document.querySelector("input[name=checkbox]");
	checkbox.addEventListener('change', _ => {
		if (this.checked) {
			axios.get(`/list/delete?list_id={{{ this._id }}}`)
			console.log("this is working")
		}
	})
	*/




	//const getList = async _ => await axios.get('/getListItems')








	//Save sticky note to database
	const saveStickyNote = async _ => {
		const content = document.querySelector('#input').value
		async _ => {
			const stickyNoteObj = { content }
			await axios.post('/sticky-note/create-sticky', stickyNoteObj).then(_ => {
				console.log("new note created")
			})
		}
	}

	const debounce = (fn, delay) => {
		let timer;
		return function (...args) {
			const context = this;
			timer && clearTimeout(timer);
			timer = setTimeout(_ => fn.apply(context, args), delay);
		};
	}
	debounce(saveStickyNote(), 1000)

	const getStickyNotes = async _ => {
		const foo = await axios.get('/getStickies')
		console.log(foo, "get stickies")
	}

	let count = 0
	const addStickyNote = _ => {
		const addBtn = document.querySelector('#add-sticky')
		const sticky = document.querySelector('#sticky-note');
		const container = document.querySelector('#container')
		count++;
		if (count === 1) sticky.style.display = "block"
		if (count > 1) {
			const stickyClone = container.cloneNode(true)
			container.appendChild(stickyClone)
		}
	}

	//fix this
	const deleteStickyNote = _ => {
		const id = document.querySelector("#sticky-note")
		document.querySelector("#container").removeChild(id)
	}

	const locateNode = (currentElement, id) => {
		const currentId = currentElement.getAttribute("id");
		if (id === currentId) return currentElement;
		return locateNode(currentElement.parentNode, id)
	}

	const container = document.querySelector("#container");
	let activeItem = null;

	let active = false;

	container.addEventListener("touchstart", dragStart, false);
	container.addEventListener("touchend", dragEnd, false);
	container.addEventListener("touchmove", drag, false);

	container.addEventListener("mousedown", dragStart, false);
	container.addEventListener("mouseup", dragEnd, false);
	container.addEventListener("mousemove", drag, false);

	function dragStart(e) {
		if (e.target !== e.currentTarget) {
			active = true;
			activeItem = locateNode(e.target, 'sticky-note');
			if (activeItem !== null) {
				if (!activeItem.xOffset) {
					activeItem.xOffset = 0;
				}
				if (!activeItem.yOffset) {
					activeItem.yOffset = 0;
				}
				if (e.type === "touchstart") {
					activeItem.initialX = e.touches[0].clientX - activeItem.xOffset;
					activeItem.initialY = e.touches[0].clientY - activeItem.yOffset;
				} else {
					activeItem.initialX = e.clientX - activeItem.xOffset;
					activeItem.initialY = e.clientY - activeItem.yOffset;
				}
			}
		}
	}

	function dragEnd(e) {
		if (activeItem !== null) {
			activeItem.initialX = activeItem.currentX;
			activeItem.initialY = activeItem.currentY;
		}
		active = false;
		activeItem = null;
	}

	function drag(e) {
		if (active) {
			if (e.type === "touchmove") {
				e.preventDefault();
				activeItem.currentX = e.touches[0].clientX - activeItem.initialX;
				activeItem.currentY = e.touches[0].clientY - activeItem.initialY;
			} else {
				activeItem.currentX = e.clientX - activeItem.initialX;
				activeItem.currentY = e.clientY - activeItem.initialY;
			}
			activeItem.xOffset = activeItem.currentX;
			activeItem.yOffset = activeItem.currentY;
			setTranslate(activeItem.currentX, activeItem.currentY, activeItem);
		}
	}

	function setTranslate(xPos, yPos, el) {
		el.style.transform = "translate3d(" + xPos + "px, " + yPos + "px, 0)";
	}


</script>