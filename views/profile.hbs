<div class="columns">
  <div class="column top-img top-img-profile top-img-main quote">
    ...
  </div>
</div>
<div class="columns">
  <div class="column is-2">
    <aside class="menu">
      <ul class="menu-list">
        <li><a href="/profile"><i class="fas fa-home fa-2x"></i>HOME</a></li>
        <li><a href="/note"><i class="far fa-sticky-note fa-2x"></i>NOTES</a></li>
        {{!-- <li><a><i class="far fa-calendar-alt fa-2x"></i></a></li>
				<li><a><i class="fas fa-book fa-2x"></i></a></li>
				<li><a><i class="fas fa-bullseye fa-2x"></i></a></li> --}}
        <li><a href="/reminder"><i class="far fa-bell fa-2x"></i>REMINDERS</a></li>
      </ul>
    </aside>
  </div>
  <div class="column dashboard">
    <div id="list-wrapper">
      <div>
        <h2>To-Do List</h2>
      </div>
      <div>
        <div>
          <ul id="list-container">
          </ul>
        </div>
        <div>
          <button onclick="createList()"><i class="fas fa-plus"></i></button>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="columns">
  <div class="column">
    <button onclick="fetchList()">TEST ME</button>
    <form>
      <i href="/" class="fas fa-plus"></i>
      <input type="text">
    </form>
    <div id="container">
    </div>
  </div>
  <div>
    <button id="add-sticky" onclick="createNewSticky()"><a>Add stickey note</a></button>
    <button><a>Get inspired</a></button>
    <button><a>Word of the day</a></button>
  </div>
</div>
<script>

  const createListItem = list => {
    const listInput = document.createElement('input')
    listInput.setAttribute('type', 'text')
    listInput.setAttribute('class', 'list-input')
    listInput.setAttribute('id', list._id);
    listInput.setAttribute('value', list.item);
    listInput.addEventListener('blur', e => updateList(e))
    return listInput
  }

  const createCheckBox = id => {
    const deleteBtn = document.createElement('a')
    const checkbox = document.createElement('i')
    checkbox.setAttribute('class', 'far fa-circle')
    checkbox.setAttribute('id', id);
    deleteBtn.addEventListener('click', e => deleteList(e.target.getAttribute('id')))
    deleteBtn.appendChild(checkbox)
    return deleteBtn
  }

  const addListItem = list => {
    const listContainer = document.querySelector('#list-container')
    const listNode = document.createElement('li')
    const listContentWrapper = document.createElement('div')
    listContentWrapper.setAttribute('class', 'listContentWrapper')
    const listContent = [createCheckBox(list._id), createListItem(list)];
    listContent.forEach(node => listNode.appendChild(node))
    listContainer.appendChild(listNode)
  }

  const createList = async _ => {
    const listObject = { item: String() }
    const { data } = await axios.post('list/create', listObject)
    addListItem(data)
  }

  const fetchList = async _ => {
    const { data = [] } = await axios.get('/list/getAll')
    const listContainer = document.querySelector('#list-container')
    listContainer.innerHTML = String();
    data.forEach(list => addListItem(list))
  }

  const deleteList = async id => {
    const { data } = await axios.get(`list/delete/${id}`)
    fetchList();
  }

  const updateList = async e => {
    const listObj = { item: e.target.value }
    const id = e.target.getAttribute('id');
    const { data } = await axios.post(`list/update/${id}`, listObj)
    fetchList();
  }

  const createStickyWrapper = _ => {
    const sticky = document.createElement('div')
    sticky.setAttribute('class', 'sticky-note')
    const article = document.createElement('article')
    article.setAttribute('class', 'message is-info')
    sticky.appendChild(article);
    return sticky
  }

  const createStickyHeader = sticky => {
    const header = document.createElement('div')
    header.setAttribute('class', 'message-header')
    header.setAttribute('class', 'stickey-header')
    const button = document.createElement('button')
    button.setAttribute('class', 'delete')
    button.setAttribute('aria-label', 'delete')
    button.setAttribute('id', sticky._id)
    button.addEventListener('click', e => deleteStickyNote(e.target.getAttribute('id')))
    header.appendChild(button)
    return header
  }

  const createStickyBody = sticky => {
    const body = document.createElement('div')
    body.setAttribute('class', 'message-body')
    const form = document.createElement('form')
    form.setAttribute('wrap', 'hard')
    form.setAttribute('class', 'form')
    const textArea = document.createElement('textArea')
    textArea.setAttribute('class', 'input')
    textArea.setAttribute('class', 'textarea')
    textArea.setAttribute('rows', '10')
    textArea.setAttribute('id', sticky._id)
    textArea.addEventListener('blur', e => updateStickyNote(e))
    textArea.innerHTML = sticky.content
    body.appendChild(form)
    body.appendChild(textArea)
    return body
  }

  const createStickyNote = sticky => {
    const stickyContainer = document.querySelector('#container')
    const stickyNote = createStickyWrapper()
    const stickyContent = [createStickyHeader(sticky), createStickyBody(sticky)]
    stickyContent.forEach(node => stickyNote.appendChild(node))
    stickyContainer.appendChild(stickyNote);
  }

  const fetchSticky = async _ => {
    const { data = [] } = await axios.get('/sticky/getAll')
    const stickyContainer = document.getElementById('container')
    stickyContainer.innerHTML = String();
    data.forEach(sticky => createStickyNote(sticky))
  }

  const createNewSticky = async _ => {
    const stickyObj = { content: String() };
    const { data } = await axios.post('/sticky/create', stickyObj)
    createStickyNote(data)
  }

  const updateStickyNote = async e => {
    const stickyObj = { content: e.target.value }
    const id = e.target.getAttribute('id');
    const { data } = await axios.post(`sticky/update/${id}`, stickyObj)
    fetchSticky()
  }

  const deleteStickyNote = async id => {
    const { data } = await axios.get(`/sticky/delete/${id}`)
    fetchSticky()
  }

  const container = document.querySelector("#container");
  let activeItem = null;

  let active = false;

  container.addEventListener("touchstart", dragStart, false);
  container.addEventListener("touchend", dragEnd, false);
  container.addEventListener("touchmove", drag, false);

  container.addEventListener("mousedown", dragStart, false);
  container.addEventListener("mouseup", dragEnd, false);
  container.addEventListener("mousemove", drag, false);

  function dragStart(e) {
    if (e.target !== e.currentTarget) {
      active = true;
      activeItem = locateNode(e.target, 'sticky-note');
      if (activeItem !== null) {
        if (!activeItem.xOffset) {
          activeItem.xOffset = 0;
        }
        if (!activeItem.yOffset) {
          activeItem.yOffset = 0;
        }
        if (e.type === "touchstart") {
          activeItem.initialX = e.touches[0].clientX - activeItem.xOffset;
          activeItem.initialY = e.touches[0].clientY - activeItem.yOffset;
        } else {
          activeItem.initialX = e.clientX - activeItem.xOffset;
          activeItem.initialY = e.clientY - activeItem.yOffset;
        }
      }
    }
  }

  function dragEnd(e) {
    if (activeItem !== null) {
      activeItem.initialX = activeItem.currentX;
      activeItem.initialY = activeItem.currentY;
    }
    active = false;
    activeItem = null;
  }

  function drag(e) {
    if (active) {
      if (e.type === "touchmove") {
        e.preventDefault();
        activeItem.currentX = e.touches[0].clientX - activeItem.initialX;
        activeItem.currentY = e.touches[0].clientY - activeItem.initialY;
      } else {
        activeItem.currentX = e.clientX - activeItem.initialX;
        activeItem.currentY = e.clientY - activeItem.initialY;
      }
      activeItem.xOffset = activeItem.currentX;
      activeItem.yOffset = activeItem.currentY;
      setTranslate(activeItem.currentX, activeItem.currentY, activeItem);
    }
  }

  function setTranslate(xPos, yPos, el) {
    el.style.transform = "translate3d(" + xPos + "px, " + yPos + "px, 0)";
  }

  const fetchQuote = async _ => {
    const { data: quote } = await axios.get('/quotes/qod');
    const quoteNote = document.querySelector('.quote');
    quoteNote.innerHTML = quote;
  }
  window.addEventListener('load', _ => {
    fetchList()
    fetchSticky()
    fetchQuote()
  })
  window.addEventListener('mouseup', _ => {
    if (activeItem && active) {
      activeItem = null;
      active = false;
    }
  })
</script>