<div>
	<div class="columns">
		<div class="column is-1">
			<aside class="menu">
				<ul class="menu-list">
					<li><a href="/profile"><i class="fas fa-home fa-2x"></i></a></li>
					<li><a href="/note"><i class="far fa-sticky-note fa-2x"></i></a></li>
					<li><a><i class="far fa-calendar-alt fa-2x"></i></a></li>
					<li><a><i class="fas fa-book fa-2x"></i></a></li>
					<li><a><i class="fas fa-bullseye fa-2x"></i></a></li>
					<li><a href="/reminder"><i class="far fa-bell fa-2x"></i></a></li>
				</ul>
			</aside>
		</div>
		<div class="column">
			<div>
				<button id="add-sticky" onclick="createStickyNote()"><a>Add stickey note</a></button>
				<button><a>Get inspired</a></button>
				<button><a>Word of the day</a></button>
			</div>

			<div class="box">
				<h2>To-Do List</h2>
				<ul id="list-container">
					{{#each listItems}}
					<li>
						<form><i class="far fa-circle"></i>{{item}}</form>
					</li>
					{{/each}}
				</ul>
				<button onclick="addListItem()"><i class="fas fa-plus"></i></button>
			</div>

			<button onclick="getStickyNotes()">TEST ME</button>






			<div id="container">
				 {{#each items}}
				{{> stickyPartial}}
				{{/each}} 

			</div>
		</div>
	</div>

	<script>

		const createListWrapper = _ => {
			const list = document.createElement('li')
			const listForm = document.createElement('form')
			list.appendChild(listForm)
			return list
		}

		const createListItem = _ => {
			const listInput = document.createElement('input')
			listInput.setAttribute('type', 'text')
			listInput.setAttribute('class', 'list-input')
			return listInput
		}

		const createCheckBox = _ => {
			const checkbox = document.createElement('i')
			checkbox.setAttribute('class', 'far fa-circle')
			return checkbox
		}

		const saveListItem = _ => {
			const listItem = createListItem()
			const listInput = listItem.value

			axios.post('/list/create', { item: listInput })
				.then(_ => console.log("new list item created"))


		}



		/*
		const updateListItem = _ => {
			const listInput = createListItem().value
			fetchList().forEach(item => {
				axios.post(`/list/updateList/#${item._id}`, listInput)
			})
		}
		*/




		const addListItem = _ => {
			const listContainer = document.querySelector('#list-container')
			const listElements = [createCheckBox(), createListItem()]
			const list = createListWrapper()
			listElements.forEach(node => {
				list.appendChild(node)
				saveListItem()   //not working
			})
			listContainer.appendChild(list)
			//list.addEventListener('blur', saveListItem)
		}

		const fetchList = async _ => {
			//const listContainer = document.querySelector('#list-container')
			const { data } = await axios.get('/list/getList')
			data.forEach(item => console.log(item._id))
			return data
		}

		/*
			const fetchNotes = async _ => {
					const { data } = await axios.get('/note/getNotes')
					const menuList = document.querySelector(".menu-list");
					menuList.innerHTML = String();
					data.forEach(note => {
						const listItem = document.createElement('li')
						listItem.setAttribute('id', note._id)
						listItem.innerHTML = note.title
						listItem.addEventListener('click', showNote)
						menuList.appendChild(listItem)
					})
					return data
					*/

		/*
			const saveListItem = async _ => {
				const listItem = document.querySelector('.list-input').value
				console.log(listItem)
				await axios.post('/list/create', { item: listItem }).then(_ => console.log("new list item created"))
			}
			*/






		const createStickyWrapper = _ => {
			const sticky = document.createElement('div')
			sticky.setAttribute('class', 'sticky-note')
			const article = document.createElement('article')
			article.setAttribute('class', 'message is-info')
			sticky.appendChild(article);
			return sticky
		}

		const createStickyHeader = _ => {
			const header = document.createElement('div')
			header.setAttribute('class', 'message-header')
			header.setAttribute('class', 'stickey-header')
			const button = document.createElement('button')
			button.setAttribute('class', 'delete')
			button.setAttribute('onclick', 'deleteStickyNote()')
			button.setAttribute('aria-label', 'delete')
			header.appendChild(button)
			return header
		}

		const createStickyBody = _ => {
			const body = document.createElement('div')
			body.setAttribute('class', 'message-body')
			const form = document.createElement('form')
			form.setAttribute('wrap', 'hard')
			form.setAttribute('class', 'form')
			const textArea = document.createElement('textArea')
			//textArea.setAttribute('onkeyup', 'saveStickyNote()')
			textArea.setAttribute('class', 'input')
			textArea.setAttribute('class', 'textarea')
			textArea.setAttribute('placeholder', 'Enter text...')
			textArea.setAttribute('rows', '10')
			body.appendChild(form)
			body.appendChild(textArea)
			return body
		}

		const createStickyNote = _ => {
			const stickyContainer = document.querySelector('#container')
			const stickyNote = createStickyWrapper()
			const stickyContent = [createStickyHeader(), createStickyBody()]
			stickyContent.forEach(node => stickyNote.appendChild(node))
			stickyContainer.appendChild(stickyNote);
			axios.post('/sticky/create', { content: 'create me' })

		}


		const getStickyNotes = async _ => {
			//const stickyText = document.querySelector('#textarea')

			//stickyContainer.innerHTML = String()
			const { data } = await axios.get('/getStickies')
			console.log(data)

		}







		const container = document.querySelector("#container");
		let activeItem = null;

		let active = false;

		container.addEventListener("touchstart", dragStart, false);
		container.addEventListener("touchend", dragEnd, false);
		container.addEventListener("touchmove", drag, false);

		container.addEventListener("mousedown", dragStart, false);
		container.addEventListener("mouseup", dragEnd, false);
		container.addEventListener("mousemove", drag, false);

		function dragStart(e) {
			if (e.target !== e.currentTarget) {
				active = true;
				activeItem = locateNode(e.target, 'sticky-note');
				if (activeItem !== null) {
					if (!activeItem.xOffset) {
						activeItem.xOffset = 0;
					}
					if (!activeItem.yOffset) {
						activeItem.yOffset = 0;
					}
					if (e.type === "touchstart") {
						activeItem.initialX = e.touches[0].clientX - activeItem.xOffset;
						activeItem.initialY = e.touches[0].clientY - activeItem.yOffset;
					} else {
						activeItem.initialX = e.clientX - activeItem.xOffset;
						activeItem.initialY = e.clientY - activeItem.yOffset;
					}
				}
			}
		}

		function dragEnd(e) {
			if (activeItem !== null) {
				activeItem.initialX = activeItem.currentX;
				activeItem.initialY = activeItem.currentY;
			}
			active = false;
			activeItem = null;
		}

		function drag(e) {
			if (active) {
				if (e.type === "touchmove") {
					e.preventDefault();
					activeItem.currentX = e.touches[0].clientX - activeItem.initialX;
					activeItem.currentY = e.touches[0].clientY - activeItem.initialY;
				} else {
					activeItem.currentX = e.clientX - activeItem.initialX;
					activeItem.currentY = e.clientY - activeItem.initialY;
				}
				activeItem.xOffset = activeItem.currentX;
				activeItem.yOffset = activeItem.currentY;
				setTranslate(activeItem.currentX, activeItem.currentY, activeItem);
			}
		}

		function setTranslate(xPos, yPos, el) {
			el.style.transform = "translate3d(" + xPos + "px, " + yPos + "px, 0)";
		}


	</script>