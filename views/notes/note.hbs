<input type="hidden" id="hidden" value={{notes}} />

<div class="columns">
  <div class="column is-one-fifth">
    <aside class="menu">
      <p class="menu-label">
        Notes
      </p>
      <ul class="menu-list">
        <li><a>New Note</a></li>
      </ul>

    </aside>
    <div id="add-note-btn">

      <button onclick="newNote()"><i class="fas fa-plus" id="add"></i></button>
    </div>

  </div>
  <div class="column" id="editor-wrapper">
    <div id="editor-contents">

      <div id="form-wrapper">
        <form autocomplete="off">
          Title:
          <input type="text" name="title" id="title">
        </form>
      </div>
      <div id="editor-container">
        <div id="editor">
          {{editor}}
        </div>
      </div>
      <div id="note-btn-wrapper">

        <button onclick="saveNote()" id="save-btn">Save</button>
        <button onclick="deleteNote()" id="delete-btn">Delete</button>
      </div>
    </div>
  </div>
</div>

<script>

  const toolbarOptions = [
    ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
    ['blockquote', 'code-block'],

    [{ 'header': 1 }, { 'header': 2 }],               // custom button values
    [{ 'list': 'ordered' }, { 'list': 'bullet' }],
    [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
    [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
    [{ 'direction': 'rtl' }],                         // text direction

    [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

    [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
    [{ 'font': [] }],
    [{ 'align': [] }],

    ['clean']                                         // remove formatting button
  ];

  const options = {
    debug: 'info',
    modules: {
      toolbar: toolbarOptions
    },
    placeholder: 'Compose an epic...',
    readOnly: false,
    theme: 'snow'
  };
  const editor = new Quill('#editor', options);

  const Delta = Quill.import('delta');

  const testObject = [{ insert: 'Goodbye World' }]

  const fetchNotes = async _ => {
    const { data = [] } = await axios.get('/note/getAll')
    const menuList = document.querySelector(".menu-list");
    menuList.innerHTML = String();
    data.forEach(note => {
      const listItem = document.createElement('li')
      listItem.setAttribute('id', note._id)
      listItem.innerHTML = note.title
      listItem.addEventListener('click', showNote)
      menuList.appendChild(listItem)
    })
  }

  const saveNote = async _ => {
    const content = editor.getContents()
    const title = document.querySelector('#title').value
    const stringifiedContent = JSON.stringify(content);
    const noteObject = { title: title, content: stringifiedContent }
    const noteId = document.querySelector("#editor").getAttribute('active-note');
    const postUrl = noteId ? `/note/update/${noteId}` : 'note/create';
    await axios.post(postUrl, noteObject).then(_ => console.log("new note created"))
    fetchNotes();
  }

  const showNote = async e => {
    const id = e.target.getAttribute('id');
    const { data: { _id, title, content } } = await axios.get(`/note/set/${id}`)
    editor.setContents(JSON.parse(content))
    document.querySelector('#title').value = title
    document.querySelector("#editor").setAttribute('active-note', _id)
  }

  const deleteNote = async _ => {
    const noteId = document.querySelector("#editor").getAttribute('active-note');
    const { data } = noteId && await axios.get(`/note/delete/${noteId}`)
    window.location.href = data;
    fetchNotes()
  }

  const newNote = async _ => {
    editor.setContents(options.placeholder)
    document.querySelector('#title').value = ""
    document.querySelector("#editor").setAttribute('active-note', String());
  }

  window.addEventListener('load', _ => fetchNotes())

</script>